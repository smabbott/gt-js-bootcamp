0.0.0 - debugging things (don't expect anything to work the first time)
      - var foo = 100/0;
      - avoid frustration
      - encourages experimentation and guessing
      - frequent trial & error
      - shortcut refresh and keeps experimental junk out of your code
      - encourage small changes 
      - focus on little pieces rather than whole application which can get unwieldy
      - better understanding of what's going on

0.0.1 - Object - oriented programming
      - Object = state(data) + behavior
      - state == nouns & adjectives
      - behavior == verbs
      - state == property values (datatypes)
      - behavior == functions, known as methods
      - an object in JS has properties names (keys) and values.

      Exercise 0.0.1
      1. create an object based on something in the room or outside
      2. it should have state and behavior at least 3 properties that are state, at least 1 function that mondifies the state
      3. at least one behavior should do somehting to the state of the object

      var marker = {
        length:5,
        color:'pink',
        inkLevel:80, // percent
        draw:function(){
          console.log('----------');
          this.inkLevel--;
        }
      };

      var marker = {
        length:5,
        color:'pink',
        inkLevel:80, // percent
        draw:function(len){
          var line = '';
          for(var i=0; i<len; i++){
            line += '-';
          }
          console.log(line);
          this.inkLevel -= len;
        }
      };

0.0.2 - what is a function, really?
      - reference to a chunk of code to be run at an arbitrary time
      - reusable code
      - it is an abstraction
      - a function is an object

      Stupid Javascript tricks 0.0.2
      - foo.toString()
      - foo.bar = 'some string'
      - foo.bar = function(){console.log('what!');}
      - foo.bar = foo
      - foo.bar(); foo.bar.bar(); foo.bar.bar.bar();

0.0.3 - Scope
      - Keep your fiends close and your vars closer
      - variables defined in a function are only accessibe from within that function
      - a function changes scope

      - set variable at global level
      - set variable with same name but different value inside function.
      - run with logging before, inside and after function

      - set variable at global level.
      - set variable inside function without var
      - run with logging before, inside and after function

      - don't set var at global level
      - set var inside function without var
      - run with logging before, inside and after function


      Exercise 0.0.3
      1. Create a situation in which one variable is not accessible from another part of the code.
      2. Demonstrate that it is not accessible
      3. Now change your code so that the variable is now accessible from where it previously wasn't.

      var functionA = function(){
        var foo = 'hotcakes';
        console.log(foo);
      };

      var functionB = function(){
        console.log(foo);
      };
     


0.0.4 This is This
      - [this] is a reference to the current context

      Stupid Javascript Tricks 0.0.4
      var obj = {
        name:function(){
          this.name = 'invisible';
        }
      };

      var obj = {
        name:function(){
          this.name();
        }
      };

0.1.0 Let's build an Exquisite Robot Army
      - identify state (variable data) and behavior (functions/actions)
      - group the state and behavior into groups of related things
      - define object (robot) around the variables and behaviors

        var robot = {
          name:null,
          rank:null,
          head:null,
          torso:null,
          legs:null,
          setName:function(newName){
            this.name = newName;
          }

        };


      Exercise 0.1.0
      - create a setter method for rank that takes a string and sets the rank to an abbreviated version of that string.
        It should not care if the string is upper or lower case.
        hint 1 : toLowerCase()
        hint 2 : case statement

        ex.
        Liutenant         => LT
        Captain           => CPT
        Major             => MAJ
        Liutenant Colonel => LTC
        Colonel           => COL
        General           => GEN

      Exercise 0.1.1
      - create a getter method for nameAndRank that returns robot's rank and Name

        getName:function(){
          return rank + " " + name;
        }

        getName:function(){
          return rank + " " + name + " the robot";
        }        

0.1.2 - return
      - it is the output of a function, the other side of ()

      Exercise 0.1.2
      - create a property "isRecruitable" that tells
        // test to see if all required vaues have been set
        isRecruitable:function(){
          return this.head !== null && this.name !== null && this.rank !== null && this.torso !== null && this.legs !== null;
        }

0.2.0 - partPickers





---------------------------------------------------
0.2.0


var robot = {
  name:null,
  rank:null,
  head:null,
  torso:null,
  legs:null,
  setName:function(newName){
    this.name = newName + ' the Robot';
  },
  setRank:function(longRank){
    longRank = longRank.toLowerCase();
    switch(longRank){
      case 'liutenant':
        this.rank = 'LT';
        break;
      case 'captain':
        this.rank = 'CPT';
        break;
      case 'major':
        this.rank = 'MAJ';
        break;
      case 'liutenant colonel':
        this.rank = 'LTC';
        break;
      case 'colonel':
        this.rank = 'COL';
        break;
      case 'general':
        this.rank = 'GEN';
        break;
    }
  },
  nameAndRank:function(){
    return this.rank + " " + this.name;
  },
  isRecruitable:function(){
    return this.head !== null && this.name !== null && this.rank !== null && this.torso !== null && this.legs !== null;
  }
};


------------------------------------------------
0.3.0 - Classes & Inheritance — OOP Part II
      - Another important technique/tool for managing code

function Robot(){
  return {
    name:null,
    rank:null,
    head:null,
    torso:null,
    legs:null,
    setName:function(newName){
      this.name = newName + ' the Robot';
    },
    setRank:function(longRank){
      longRank = longRank.toLowerCase();
      switch(longRank){
        case 'liutenant':
          this.rank = 'LT';
          break;
        case 'captain':
          this.rank = 'CPT';
          break;
        case 'major':
          this.rank = 'MAJ';
          break;
        case 'liutenant colonel':
          this.rank = 'LTC';
          break;
        case 'colonel':
          this.rank = 'COL';
          break;
        case 'general':
          this.rank = 'GEN';
          break;
      }
    },
    nameAndRank:function(){
      return this.rank + " " + this.name;
    },
    isRecruitable:function(){
      return this.head !== null && this.name !== null && this.rank !== null && this.torso !== null && this.legs !== null;
    }
  };
}

RESOURCES
• javascript garden:  http://bonsaiden.github.io/JavaScript-Garden
• crockford on JS:    http://www.youtube.com/watch?v=JxAXlJEmNMg
• Discover Dev Tools: http://discover-devtools.codeschool.com/?locale=en

To Cover Later ______________________________
• events - bubbling
• jquery is convenience/abstraction. Treat elements on dom the same way as with css.
• return - functions always returns a value. return undefined if not specified.


